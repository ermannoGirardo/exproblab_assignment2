<?xml version="1.0"?>
<launch>

	<!--arguments-->
	<arg name="domain_path" default="$(find erl2)/common/domain.pddl" />
	<arg name="problem_path" default="$(find erl2)/common/problem.pddl" />

	<!-- knowledge base -->
	<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false"	output="screen">
		<param name="domain_path" value="$(arg domain_path)" />
		<param name="problem_path" value="$(arg problem_path)" />
		<!-- conditional planning flags -->
		<param name="use_unknowns" value="false" />
	</node>
	
	<!-- problem generation -->
	<include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
	<arg name="knowledge_base" value="rosplan_knowledge_base" />
	<arg name="domain_path" value="$(arg domain_path)" />
	<arg name="problem_path" value="$(find rosplan_demos)/common/new_problem.pddl" />
	<arg name="problem_topic" value="problem_instance" />
	</include>
	
	<!-- planning system -->
	<include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
	<arg name="use_problem_topic" value="true" />
	<arg name="problem_topic" value="/rosplan_problem_interface/problem_instance" />
	<arg name="planner_topic" value="planner_output" />
	<arg name="domain_path" value="$(arg domain_path)" />
	<arg name="data_path" value="$(find rosplan_demos)/common/" />
	<arg name="planner_command" value="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
	</include>
	
	<!-- plan parser -->
	<node name="rosplan_parsing_interface" pkg="rosplan_planning_system" type="pddl_simple_plan_parser" respawn="false" output="screen">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="planner_topic" value="/rosplan_planner_interface/planner_output" />
	<param name="plan_topic" value="complete_plan" />
	</node>
	
	<!-- plan dispatcher -->
	<node name="rosplan_plan_dispatcher" pkg="rosplan_planning_system" type="pddl_simple_plan_dispatcher" respawn="false" output="screen">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="plan_topic" value="/rosplan_parsing_interface/complete_plan" />
	<param name="action_dispatch_topic" value="action_dispatch" />
	<param name="action_feedback_topic" value="action_feedback" />
	</node>
	
	<!-- Simulated Actions:>
	<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" > 
	<arg name="pddl_action_name" value="go_to_waypoint" />
	</include>
	
	<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
		<arg name="pddl_action_name" value="take_hint" />
	</include
	
	<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
		<arg name="pddl_action_name" value="check_hypothesis" />
	</include>>-->
	
	<!-- Implements all the actions interface: -->

	<!-- if needed add duration as argument -->
	
	<!-- Go to Waypoint durative action mapping interface--> 
	<node name="rosplan_interface_go_to_waypoint" pkg="my_rosplan_interface" type="go_to_waypoint" respawn="false" output="screen">
		<param name="knowledge_base" value="rosplan_knowledge_base" />
		<param name="pddl_action_name" value="go_to_waypoint" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>
	
	<!-- Take Hint durative action mapping interface-->
	<node name="rosplan_interface_take_hint" pkg="my_rosplan_interface" type="take_hint" respawn="false" output="screen">
		<param name="knowledge_base" value="rosplan_knowledge_base" />
		<param name="pddl_action_name" value="take_hint" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>
	
	<!-- Initialize the system durative action mapping interface-->
	<node name="rosplan_interface_initialization" pkg="my_rosplan_interface" type="initialization" respawn="false" output="screen">
		<param name="knowledge_base" value="rosplan_knowledge_base" />
		<param name="pddl_action_name" value="initialization" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>


	<!-- Check hypothesis durative action mapping interface-->
	<node name="rosplan_interface_check_hypothesis" pkg="my_rosplan_interface" type="check_hypothesis" respawn="false" output="screen">
		<param name="knowledge_base" value="rosplan_knowledge_base" />
		<param name="pddl_action_name" value="check_hypothesis" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>
	
	<!-- Test hypothesis durative action mapping interface-->
	<node name="rosplan_interface_test_hypothesis" pkg="my_rosplan_interface" type="test_hypothesis" respawn="false" output="screen">
		<param name="knowledge_base" value="rosplan_knowledge_base" />
		<param name="pddl_action_name" value="test_hypothesis" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
	</node>
	
	<!-- Execute the node demanded for replanning and starts all the clients -->
	<node name="update_knowledge_replan" pkg="erl2" type ="update_knowledge_replan.py"  output="screen" />
	
	<node name="replan" pkg="erl2" type ="replan.py"  output="screen" />
	

</launch>


