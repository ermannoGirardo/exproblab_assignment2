#!/usr/bin/env python

## @package erl2
#   \file perceive_hints.py
#   \brief collect hints once the Marker is reached with e.e
#   \author Ermanno Girardo
#   \version 1.0
#
#
#   Subscribes to: <BR>
#        /oracle_hint
#
#   Service to: <BR>
#	/test_consistency
#
# Description:    
# 
# This node is demanded to perceive the hints generated by the oracle (simulation.cpp) node on the topic /oracle_hint


import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import *
from moveit_commander.conversions import pose_to_list
from erl2.srv import *
from erl2.msg import *
from std_srvs.srv import *
import time
import rosplan_dispatch_msgs.srv 
import array
import numpy as np

# Global Variables###############################
			     			##
hypotheses=[]        				##
is_old = [False,False,False,False,False,False] ##
		     				##
#################################################

class Hypothesis:
    """ This is the class that implement an hypothesis """
    
    def __init__(self):
        """ Initialization of the class."""
        self.killer = []
        self.killer_weapon = []
        self.killer_location = []
        self.ID=-1


def perceive_callback(hint):
    """Callback executed when a hint is perceived  """
    #Boolean to keep in mind if a hint is duplicated
    is_double=False
    j=0
    #Check if the hint value is valid
    if(hint.value!='-1'):
    	#Check the type of the hint
        if(hint.key=='who'):
           #Run on all the hypothesis
            while ((j<len(hypotheses[hint.ID].killer)) and (is_double==False)):
                #Check if the hint is already perceived
                if(hint.value==hypotheses[hint.ID].killer[j]):
                    #If the hint is already perceived remove it
                    hypotheses[hint.ID].killer.remove(hint.value)
                    #The hint is already perceived
                    is_double=True
                #update the counter
                j = j + 1
            #Append the new hint
            hypotheses[hint.ID].killer.append(hint.value)

        is_double=False
        j=0   
        #Check the type of the hint
        if(hint.key=='where'):
            #Run on all the hypothesis
            while ((j<len(hypotheses[hint.ID].killer_location))and (is_double==False)):
                #Check if the hint is already perceived
                if(hint.value==hypotheses[hint.ID].killer_location[j]):
                    hypotheses[hint.ID].killer_location.remove(hint.value)
                    #The hint is already perceived
                    is_double=True
                j = j + 1
            hypotheses[hint.ID].killer_location.append(hint.value)

        is_double=False
        j=0     
        #Check the type of the hint
        if(hint.key=='what'):
            #Run on all the hypothesis
            while ((j<len(hypotheses[hint.ID].killer_weapon))and (is_double==False)):
                #Check if the hint is already perceived
                if(hint.value==hypotheses[hint.ID].killer_weapon[j]):
                    hypotheses[hint.ID].killer_weapon.remove(hint.value)
                    #The hint is already perceived
                    is_double=True
                j = j + 1
            hypotheses[hint.ID].killer_weapon.append(hint.value)

    print("New hint is perceived")
    print('ID:',hint.ID,", key: ",hint.key,", value: ",hint.value,"\n")
    


def test_consistency_clbk(req):
    #Initialize all the response to False
    res = ConsistentHypothesisResponse([False,False,False,False,False,False])
    if req.new_hp:
    	print("This is the list of all acquired hypotheses: \n")
    	for i in range (6):
    		hp = "ID {0}: The killer is {1} using {2} in {3}".format(i,hypotheses[i].killer,hypotheses[i].killer_weapon,hypotheses[i].killer_location)
    		print(hp)
    		#Check if hypotheses are consistent simply checking the number of instance present in the hypotheses fields
    		if(len(hypotheses[i].killer)==1 and len(hypotheses[i].killer_location)==1 and len(hypotheses[i].killer_weapon)==1):
    			if is_old[i] == False:
    				is_old[i] = True
    				res.consistent_IDs[i] = True
    else:
    	for i in range (6):
    		if(len(hypotheses[i].killer)==1 and len(hypotheses[i].killer_location)==1 and len(hypotheses[i].killer_weapon)==1):
    			res.consistent_IDs[i] = True
    return res
    		            


def main():
    """main of the perceive_hints node"""
    rospy.init_node('perceive_test_consistency',anonymous=True)
    #Subcriber to oracle hint
    rospy.Subscriber("oracle_hint", ErlOracle, perceive_callback)
    #Service to test the consistency of an hypothesis
    test_consistency_srv = rospy.Service("test_consistency",ConsistentHypothesis,test_consistency_clbk)
    #Generate the six possible hypotheses and store it into hypothesis global variable
    for i in range(6):
        HP = Hypothesis()
        HP.ID=i
        hypotheses.append(HP)
    
    print("Ready to perceive hints")
    rospy.spin()
    
if __name__ == '__main__':
    main()
